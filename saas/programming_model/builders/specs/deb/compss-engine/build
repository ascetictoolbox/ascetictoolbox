#!/bin/bash -e

  distribution=$1
  arch=$2
  COMPSs_version=$3

  release_types="unstable testing stable"
  trunk_rel_path=../../../../
  packages_target=${trunk_rel_path}/builders/packages/
  PKGNAME=$(cat $arch/control | grep 'Package:' | tail -n 1 | cut -d ":" -f2- | cut -d " " -f2-)

  echo " "
  echo "* Erasing previous tmp Files..."
  rm -rf tmp/

  echo " "
  echo "* Compiling sources..."
  cd ${trunk_rel_path}
  mvn -U clean install
  cd -

  echo " "
  echo "* Create deployment folders"
  COMPSs_target=tmp/opt/COMPSs
  mkdir -p ${COMPSs_target}
  mkdir -p ${COMPSs_target}/Doc
  mkdir -p ${COMPSs_target}/Dependencies
  mkdir -p ${COMPSs_target}/Runtime
  mkdir -p ${COMPSs_target}/Runtime/configuration
  mkdir -p ${COMPSs_target}/Runtime/scripts
  mkdir -p ${COMPSs_target}/Runtime/adaptors
  mkdir -p ${COMPSs_target}/Runtime/scheduler

  echo " "
  echo "* Copy deployment files"
  #Doc
  cp -r ${trunk_rel_path}/doc/* ${COMPSs_target}/Doc
  find ${COMPSs_target}/Doc -name *.html | xargs rm -rf
  cp ${trunk_rel_path}/changelog ${COMPSs_target}
  cp ${trunk_rel_path}/LICENSE ${COMPSs_target}
  cp ${trunk_rel_path}/NOTICE ${COMPSs_target}
  cp ../README ${COMPSs_target}
  cp ${trunk_rel_path}/RELEASE_NOTES ${COMPSs_target}

  #Dependencies
  cp -r ${trunk_rel_path}/files/paraver ${COMPSs_target}/Dependencies/
  cp -r ${trunk_rel_path}/dependencies/JAVA_GAT ${COMPSs_target}/Dependencies/

  #Config
  cp -r ${trunk_rel_path}/compss/runtime/config/* ${COMPSs_target}/Runtime/configuration/
  find ${COMPSs_target}/Runtime/configuration -name src | xargs rm -rf
  find ${COMPSs_target}/Runtime/configuration -name target | xargs rm -rf
  find ${COMPSs_target}/Runtime/configuration/ -name pom.xml | xargs rm -f
  find ${COMPSs_target}/Runtime/configuration/ -name .settings | xargs rm -rf
  find ${COMPSs_target}/Runtime/configuration/ -name .project | xargs rm -f
  find ${COMPSs_target}/Runtime/configuration/ -name .classpath | xargs rm -f

  #Scripts
  cp -r ${trunk_rel_path}/compss/runtime/scripts/* ${COMPSs_target}/Runtime/scripts/

  #Adaptors
  path_source="${trunk_rel_path}/compss/runtime/adaptors"
  path_target="${COMPSs_target}/Runtime/adaptors"
  adaptors=$(ls ${path_source})
  for adaptor in $adaptors; do
    if [ "$adaptor" != "commons" ] && [ "$adaptor" != "pom.xml" ]; then
      mkdir ${path_target}/$adaptor
      mkdir ${path_target}/$adaptor/master
      cp ${path_source}/$adaptor/master/*.jar ${path_target}/$adaptor/master
      if [ -f ${path_source}/$adaptor/master/properties ]; then
        cp ${path_source}/$adaptor/master/properties ${path_target}/$adaptor/master
      fi
      if [ -d "${path_source}/$adaptor/scripts/" ]; then
        mkdir -p ${COMPSs_target}/Runtime/scripts/system/adaptors/$adaptor/
        cp -r ${path_source}/$adaptor/scripts/* ${COMPSs_target}/Runtime/scripts/system/adaptors/$adaptor/
      fi
    fi
  done
  find ${COMPSs_target}/Runtime/adaptors -name pom.xml | xargs rm -f

  #Schedulers
  schedulers=$(find ${trunk_rel_path}/compss/runtime/scheduler/ -name "*.jar")
  for scheduler in $schedulers; do
    cp $scheduler ${COMPSs_target}/Runtime/scheduler/
  done
  rm -r ${COMPSs_target}/Runtime/scheduler/compss-scheduler-commons.jar

  #Engine
  cp ${trunk_rel_path}/compss/runtime/compss-engine.jar ${COMPSs_target}/Runtime/

  #Clean svn files
  find ${COMPSs_target} -name .svn -print0 | xargs -0 rm -rf  

  for rt in ${release_types}; do
    echo " "
    echo "* Creating package structure for ${rt}..."
    mkdir -p tmp/DEBIAN
    chmod 755 .
    cp $arch/control tmp/DEBIAN/control
    cp docs tmp/DEBIAN/docs
    cp compat tmp/DEBIAN/compat
    cp conffiles tmp/DEBIAN/conffiles
    cp preinst tmp/DEBIAN/preinst
    cp postinst tmp/DEBIAN/postinst
    cp prerm tmp/DEBIAN/prerm
    cp postrm tmp/DEBIAN/postrm
    PKGVERSION=${COMPSs_version}.${distribution}
    if [ "$rt" != "stable" ]; then
      PKGVERSION="${COMPSs_version}.${distribution}-${rt}"
    fi
    sed -i '/Version:/cVersion: '${PKGVERSION}'' tmp/DEBIAN/control

    echo "  * Generating md5sums file..." 
    cd tmp/
    files=$(find . -type f | grep -v DEBIAN | cat)
    if [ "${files}" != "" ]; then
      md5sum ${files} > DEBIAN/md5sums
    else 
      touch DEBIAN/md5sums
    fi
    cd ../
    echo Installed-Size: $(du tmp/ | tail -1 | awk '{print $1}') >> tmp/DEBIAN/control

    echo "  * Generating DEB package..."
    dpkg -b tmp ${PKGNAME}_${PKGVERSION}_${arch}.deb
    if [ $? -ne 0 ]; then
      echo "Error creating deb package"
      exit 1
    fi

    echo "  * Cleaning tmp files..."
    rm -rf tmp/DEBIAN

    echo "  * Moving built DEB package to final location..."
    mkdir -p ${packages_target}/${distribution}/$PKGNAME 
    mv ${PKGNAME}_${PKGVERSION}_${arch}.deb ${packages_target}/${distribution}/$PKGNAME
  done

  # Clean COMPSs tmp files
  echo " "
  echo "* Cleaning COMPSs tmp files"
  rm -rf tmp/

