package eu.ascetic.saas.applicationpackager.ide.wizards;



import org.apache.log4j.Logger;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;

import eu.ascetic.paas.applicationmanager.model.Application;
import eu.ascetic.paas.applicationmanager.model.Deployment;
import eu.ascetic.saas.applicationpackager.appmanager.client.AppManagerClientHC;
import eu.ascetic.saas.applicationpackager.ide.wizards.progressDialogs.AppManagerCallProgressBarDialog;

// TODO: Auto-generated Javadoc
/**
 * 
 * Copyright 2015 ATOS SPAIN S.A. 
 * 
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * @author David Rojo Antona. Atos Research and Innovation, Atos SPAIN SA
 * e-mail david.rojoa@atos.net 
 * 
 * This class shows the response from Application Manager when an OVF file is sent
 *
 */

public class XmlResponseAppManViewerWizardPage extends WizardPage {

    protected final static Logger LOGGER = Logger.getLogger(XmlResponseAppManViewerWizardPage.class);
	/** The container. */
	private Composite container;
	
	/** The styled text. */
	private StyledText styledText;
	
//	private StyledText logConsoleText;
	
	/** The lb app value. */
	private Label lbAppValue;
	
	/** The lb deployment id value. */
	private Label lbDeploymentIdValue;
	
	/** The lb deployment status value. */
	private Label lbDeploymentStatusValue;
	
	/** The lb error name. */
	private Label lbErrorName;
	
	/** The lb error value. */
	private Label lbErrorValue;
	
	/** The app. */
	private Application app;
	
	private AppManagerCallProgressBarDialog dialog;
	
	/**
	 * Instantiates a new xml response app man viewer wizard page.
	 */
	protected XmlResponseAppManViewerWizardPage() {
		super("XML generated by ASCETiC Application Manager");
		setTitle("XML generated by ASCETiC Application Manager");
		setDescription("XML generated by ASCETiC Application Manager. Click Finish to end");
		//is it right??
		setControl(styledText);
	}

	/* (non-Javadoc)
	 * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public void createControl(Composite parent) {
		container = new Composite(parent, SWT.NONE);
		GridLayout layout = new GridLayout();
		container.setLayout(layout);
		layout.numColumns = 2;
		
		Label lbAppName = new Label(container, SWT.NONE);
		lbAppName.setText("Application:");
		
		lbAppValue = new Label(container, SWT.NONE);
		lbAppValue.setText("                                                      ");
		
		Label lbDeploymentIdName = new Label(container, SWT.NONE);
		lbDeploymentIdName.setText("Deployment ID:");
		
		lbDeploymentIdValue = new Label(container, SWT.NONE);
		lbDeploymentIdValue.setText("                                              ");
		
		Label lbDeploymentStatusName = new Label(container, SWT.NONE);
		lbDeploymentStatusName.setText("Status:");
		
		lbDeploymentStatusValue = new Label(container, SWT.NONE);
		lbDeploymentStatusValue.setText("                                              ");
		Color red = new Color(super.getShell().getDisplay(), 255, 0, 0); 
//		lbDeploymentStatusValue.setForeground(red);
		
		lbErrorName = new Label(container, SWT.NONE);
		lbErrorName.setText("Error:");
		lbErrorName.setVisible(false);
		
		lbErrorValue = new Label(container, SWT.NONE);
		lbErrorValue.setText("                                                                                          ");
		lbErrorValue.setVisible(false);
		lbErrorValue.setForeground(red);
		
		//feb 2016: adding log text area to the window
//		Label contentLabel = new Label(container, SWT.NONE);
//		contentLabel.setText("Log");
////		styledText = new StyledText(container, SWT.V_SCROLL | SWT.BORDER);
//		logConsoleText = new StyledText(container, SWT.MULTI | SWT.BORDER | SWT.WRAP | SWT.V_SCROLL);
//		logConsoleText.setLayoutData(new GridData(GridData.FILL_BOTH));
//			
//		logConsoleText.setText("");
//		logConsoleText.setEditable(false);
		//end feb2016
		
		
		// required to avoid an error in the system
		setControl(container);
		//setPageComplete(false);
		setPageComplete(false);
		
	}

	/**
	 * Sets the content.
	 *
	 * @param app the new content
	 */
	public void setContent(Application app, AppManagerCallProgressBarDialog dialog) {
		// TODO Auto-generated method stub
		this.app = app;
		this.dialog = dialog;
		updateFields();
		waitToFinish();
	}

	private void updateStatus(final Deployment deployment, final String status){
		Display.getDefault().asyncExec(new Runnable() {
    		public void run() {
    			 if (!status.equalsIgnoreCase(lbDeploymentStatusValue.getText())){
//                 	LOGGER.info("Deployment ID: " + deployment.getId());
     				LOGGER.info("Deployment ID: " + deployment.getId() + ", status: " + status);
     				dialog.addLogMessage("Deployment ID: " + deployment.getId() + ", status: " + status);
     				lbDeploymentStatusValue.setText(status);                
     			}
    		}
    	});
	}
	
	private void updateStatusBackgroundColor(final Color c){
		Display.getDefault().asyncExec(new Runnable() {
    		public void run() {
    			lbDeploymentStatusValue.setForeground(c);
    		}
    	});
	}
	
	/**
	 * Wait to finish.
	 */
	private void waitToFinish() {
		String status = "";
		if (app.getDeployments() != null){
			Deployment deployment = app.getDeployments().get(0);
			if (deployment != null){
				status = deployment.getStatus();
				updateStatus(deployment, status);
//				System.out.println("Deployment ID: " + deployment.getId());
//				System.out.println("Deployment " + deployment.getId() + " status: " + status);
				AppManagerClientHC appManClient = new AppManagerClientHC();
				Deployment dep;
				while (!status.equalsIgnoreCase("Deployed") && !status.equalsIgnoreCase("ERROR")){
					dep = appManClient.getDeployment(app.getName() + "", deployment.getId() + "");
					if (!dep.getStatus().equalsIgnoreCase(status)){
						status = dep.getStatus();
						updateStatus(dep, status);
					}
				}
				
				Color c = null;
				if (status.equalsIgnoreCase("Deployed")){
					c = new Color(super.getShell().getDisplay(), 0, 255, 0);				
				}	
				else if (status.equalsIgnoreCase("ERROR")) {
					c = new Color(super.getShell().getDisplay(), 255, 0, 0);
				}
				if (c!=null){
					updateStatusBackgroundColor(c);
				}
				setPageComplete(true);
			}
		}	
	}
	

	/**
	 * Update fields.
	 */
	private void updateFields(){
		Display.getDefault().asyncExec(new Runnable() {
    		public void run() {
    			lbAppValue.setText(app.getName());
    			if (app.getDeployments() != null){
    				Deployment d = app.getDeployments().get(0);
    				if (d!=null){
    					lbDeploymentIdValue.setText(d.getId() + "");
    					lbDeploymentStatusValue.setText(d.getStatus());
    				}
    			}
    		}
    	});
		
	}
	
	/**
	 * Sets the error uploading app.
	 *
	 * @param msg the new error uploading app
	 */
	public void setErrorUploadingApp(String msg, AppManagerCallProgressBarDialog dialog) {
		// TODO Auto-generated method stub
		this.dialog = dialog;
		lbErrorName.setVisible(true);
		lbErrorValue.setVisible(true);
		lbErrorValue.setText(msg);
		dialog.addLogMessage(msg);
		setPageComplete(true);
	}
	
//	public void addLogMessage(String message){
//		logConsoleText.setText(logConsoleText.getText() + "\n" + message);
//	}

}
