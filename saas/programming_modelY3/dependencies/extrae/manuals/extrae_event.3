.\" Process this file with
.\" groff -man -Tascii $FILE
.\"
.TH EXTRAE_EVENT 3 "MAY 2010"
.SH NAME
extrae_event, extrae_counters, extrae_eventandcounters, extrae_shutdown, extrae_restart, extrae_set_tracing_tasks

 - API calls for the Extrae instrumentation facility
.\"
.\" Com va?
.\" 
.SH SYNOPSIS
C/C++ API:

.I #include <extrae_user_events.h>

void
.B Extrae_event
(unsigned int type, unsigned int value);

void
.B Extrae_counters
(void);

void
.B Extrae_eventandcounters
(unsigned int type, unsigned int value);

void 
.B Extrae_shutdown
(void);

void
.B Extrae_restart
(void);

void
.B Extrae_set_tracing_tasks
(unsigned int from, usigned int to);

void 
.B Extrae_set_options
(int options);

.B Extrae_previous_hwc_set 
()

.B Extrae_next_hwc_set
()
Fortran API:

.I include <extrae_user_eventsf.h>

.B extrae_event
(INTEGER type, INTEGER value)

.B extrae_counters
()

.B extrae_eventandcounters
(INTEGER type, INTEGER value)

.B extrae_shutdown
()

.B extrae_restart
()

.B extrae_set_tracing_tasks
(INTEGER from, INTEGER to)

.B extrae_set_options
(INTEGER options)

.B extrae_previous_hwc_set 
()

.B extrae_next_hwc_set
()
.\"
.\" Descripcio
.\"
.SH DESCRIPTION
Extrae instruments MPI routines by default, but it also allows manual instrumentation on the user code. This section shows and describes all the calls provided by Extrae to whoever wants instrument manually any application.

The 
.B extrae_event 
adds a single timestamped event into the tracefile. The event has two arguments: type and value.

Some common use of events are:

* Identify loop iterations (or any code block): Given a loop, the user can set a unique type for the loop and a value related to the iterator value of the loop. For example:

  for (i = 1; i <= MAX_LOOP; i++)
  {
    Extrae_event (1000, i);
    [original loop code]
  }
  Extrae_event (1000, 0);

The last added call to Extrae\_event marks the end of the loop setting the event value to 0, which facilitates the analysis with Paraver.

* Identify user routines: Choosing a constant type (6000019 is usual in other tracing tools) and different values for different routines (set to 0 to mark a "leave" event) 

  void routine1 (void)
  {
    Extrae_event (6000019, 1);
    [routine 1 code]
    Extrae_event (6000019, 0);
  }

  void routine2 (void)
  {
    Extrae_event (6000019, 2);
    [routine 2 code]
    Extrae_event (6000019, 0);
  }

* Identify any point in the application using a unique combination of type and value.


.B Extrae_counters
obtains information of the processor performance counters when it is invoked. The counters are those pointed by EXTRAE_COUNTERS (see on man 1 mpitrace).


.B Extrae_eventandcounters
lets the user add an event and obtain the performance counters with one call. All the information will have exactly the same timestamp.

.B Extrae_shutdown
stops further tracing. The tracing can be restarted invoking 
.B Extrae_restart


.B Extrae_set_tracing_tasks
changes which tasks emit information to the intermediate tracefiles. By default, all tasks are traced by default and this call lets the user choose which subrange of the tasks will be allowed to perform the tracing and which will be disallowed. Note that the only way to let all the tasks trace is calling 
.B Extrae_set_tracing_tasks
with parameters 0 and number of tasks.

Calling 
.B Extrae_shutdown
and then
.B Extrae_restart
will not change which tasks emit information to the intermediate trace file.

.B Extrae_set_options
can change the internal behaviour of the tracing facility. Just use one of the following constants combined with a bitwise or (| operator in C, IOR in Fortran) to enable or disable some components of the tracing facility.

.IP EXTRAE_DISABLE_ALL_OPTIONS
Disables EVERYTHING but the user events inserted manually on the source code.

.IP EXTRAE_CALLER_OPTION
If present and if the related environment variable is also present, every MPI call will emit information of the routine that invoked that MPI call.

.IP EXTRAE_HWC_OPTION
If activated, it will emit information about the hardware counters available (if the related environment variable is also defined).

.IP EXTRAE_MPI_HWC_OPTION
If it is activated and the tracing facility is configured to obtain hardware counters information, it will emit this kind of information every time a MPI call is invoked.

.IP EXTRAE_MPI_OPTION
If it is activated, the tracing facility will emit to the tracefile information of every MPI call.

.IP EXTRAE_ENABLE_ALL_OPTIONS
Enables EVERYTHING (default value). Requires some environment variables to be setup on the execution of the instrumented code.

.PP
.B Extrae_next_hwc_set
and
.B Extrae_previous_hwc_set
let the user change the hardware counters set if there are several specified in the XML file.

.\"
.\" Opcions
.\"
.SH AUTHOR
Tool was developed at the CEPBA (European Center for Parallelism of Barcelona) and at the BSC (Barcelona Supercomputing Center) by the "tools team".

Documentation was written by Harald Servat Gelabert
.\"
.\" Com reportar bugs
.\"
.SH "REPORTING BUGS"
If you find any bug on the documentation or in the software, please send a descriptive mail to

.B tools@bsc.es
.\"
.\" D'on treure mes informacio
.\"
.SH "ONLINE DOCUMENTATION"
More information and detailed examples can be found at

.B http://www.bsc.es/paraver
.\"
.\" Altres
.\"
.SH "SEE ALSO"
.BR mpi2prv (1)
.BR extrae (1)
