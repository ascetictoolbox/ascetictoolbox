package net.atos.ari.seip.CloudManager.atomicActions;

import org.apache.log4j.Logger;
import org.opennebula.client.Client;
import org.opennebula.client.OneResponse;
import org.opennebula.client.template.Template;


public class TemplateActions {
	
	Logger log = Logger.getLogger(this.getClass().getName());

		
	public TemplateActions() {
		super();
		//this.dcc = dcc;
	}
	public TemplateActions(Client oneClient) {
		super();
		//this.dcc = dcc;
	}

	public String createTemplate(String vmName, String imageName, int cpu, int vcpu, int mem, String net ) {
	    String Template = " NAME   = " +
	    		vmName +
	    		"\n" +
	    		"CPU    = " +
	    		cpu +
	    		"\n" +
	    		"VCPU   = " +
	    		vcpu +
	    		"\n" +
	    		"MEMORY = " +
	    		mem +
	    		"\n" +
	    		"OS = [ \n" +
	    		"\tARCH = \"x86_64\",\n" +
	    		"\tMACHINE = \"rhel6.3.0\",\n" +
	    		"\tBOOT = \"hd\"  ]\n" +
	    		"DISK = [ \n" +
	    		"\tIMAGE = \"" +
	    		imageName +
	    		"\",\n" +
	    		"\tIMAGE_UNAME = \"oneadmin\",\n" +
	    		"BUS = \"virtio\",\n" +
	    		"DRIVER = \"qcow2\" ]\n" +
	    		"NIC = [ \n" +
	    		"\tNETWORK = \"" +
	    		net +
	    		"\",\n" +
	    		"NETWORK_UNAME = \"oneadmin\",\n" +
	    		"MODEL = \"virtio\" ]\n" +
	    		"RAW = [\n" +
	    		"\ttype = \"kvm\",\n" +
	    		"\tdata = \"<devices>\n" +
	    		"\t<serial type='pty'>\n" +
	    		"\t<source path='/dev/pts/1'/>\n" +
	    		"\t<target port='0'/>\n" +
	    		"\t<alias name='serial0'/>\n" +
	    		"\t</serial>\n" +
	    		"\t<console type='pty' tty='/dev/pts/1'>\n" +
	    		"\t<source path='/dev/pts/1'/>\n" +
	    		"\t<target type='serial' port='0'/>\n" +
	    		"\t<alias name='serial0'/>\n" +
	    		"\t</console>\n" +
	    		"\t</devices>\"\n" +
	    		"]";
	    return Template;
	}
	public String updateTemplate(Client oneClient, int newTempID, String updated) {
		try {
			
			log.debug("Trying to restart the virtual machine... ");
			Template template = new Template(newTempID, oneClient);
			 OneResponse rc = template.update(updated);
		    if( rc.isError() )
            {
              log.error( "Instance restart: " + rc.getErrorMessage() );
            }
        	else
            {
         
        		 log.debug( "Instance restart: " + rc.getMessage());
            }
		    
		    //vm.lcmStateStr();
		    return template.getId();
		    
		} catch (Exception e) {
			log.error("error update Template " + newTempID);
			return null;
		}
	}
}
